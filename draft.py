############################################################################################################    # Plot del histograma de la suma acumulativa    cumulative_returns = df_backtesting[['strate_ret', 'actual_ret']].cumsum()    cumulative_returns.hist(bins=50, figsize=(10, 6))    plt.title('Histogram of Cumulative Returns')    plt.xlabel('Cumulative Returns')    plt.ylabel('Frequency')    plt.grid(True)    plt.show()        # Plot the cumulative sum over time    cumulative_returns.plot(figsize=(10, 6))    plt.title('Cumulative Returns Over Time')    plt.xlabel('Time Index')    plt.ylabel('Cumulative Returns')    plt.grid(True)    plt.show()        # Calculate total accumulated return    total_return_strategy = df_backtesting['strate_ret'].sum()    total_return_actual   = df_backtesting['actual_ret'].sum()        # Calculate mean return per time period    mean_return_strategy = df_backtesting['strate_ret'].mean()    mean_return_actual   = df_backtesting['actual_ret'].mean()        # Calculate volatility    volatility_strategy = df_backtesting['strate_ret'].std()    volatility_actual   = df_backtesting['actual_ret'].std()        # Assuming risk-free rate is 0 for simplicity    risk_free_rate = 0.0        # Calculate Sharpe ratio    sharpe_ratio_strategy = (mean_return_strategy - risk_free_rate) / volatility_strategy    sharpe_ratio_actual   = (mean_return_actual - risk_free_rate) / volatility_actual        # Calculate max drawdown    max_drawdown_strategy = (df_backtesting['strate_ret'].cumsum() - df_backtesting['strate_ret'].cumsum().cummax()).min()    max_drawdown_actual   = (df_backtesting['actual_ret'].cumsum() - df_backtesting['actual_ret'].cumsum().cummax()).min()        # Calculate Calmar ratio    calmar_ratio_strategy = total_return_strategy / abs(max_drawdown_strategy)    calmar_ratio_actual   = total_return_actual / abs(max_drawdown_actual)        # Print results         print('\n')    print("Total accumulated return for strategy   :", round(total_return_strategy * 100, 2))    print("Total accumulated return for actual     :", round(total_return_actual * 100, 2))    print("Mean return per time period for strategy:", round(mean_return_strategy * 100, 2))    print("Mean return per time period for actual  :", round(mean_return_actual * 100, 2))    print("Volatility for strategy                 :", round(volatility_strategy, 2))    print("Volatility for actual                   :", round(volatility_actual, 2))    print("Sharpe ratio for strategy               :", round(sharpe_ratio_strategy * 100, 2))    print("Sharpe ratio for actual                 :", round(sharpe_ratio_actual * 100, 2))    print("Max drawdown for strategy               :", round(max_drawdown_strategy, 2))    print("Max drawdown for actual                 :", round(max_drawdown_actual, 2))    print("Calmar ratio for strategy               :", round(calmar_ratio_strategy, 2))    print("Calmar ratio for actual                 :", round(calmar_ratio_actual, 2))